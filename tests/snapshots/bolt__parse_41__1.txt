_bolt_lineno = [1], [1]
_bolt_helper_loop = _bolt_runtime.helpers['loop']
_bolt_helper_branch = _bolt_runtime.helpers['branch']
_bolt_helper_children = _bolt_runtime.helpers['children']
_bolt_helper_replace = _bolt_runtime.helpers['replace']
with _bolt_runtime.scope() as _bolt_var2:
    while True:
        with _bolt_runtime.scope() as _bolt_condition_commands:
            _bolt_var0 = True
        with _bolt_helper_loop(_bolt_var0) as (_bolt_loop_overridden, _bolt_var1):
            _bolt_runtime.commands.extend(_bolt_condition_commands)
            if not _bolt_loop_overridden:
                _bolt_var0 = bool(_bolt_var0)
            with _bolt_helper_branch(_bolt_var0) as _bolt_condition:
                if _bolt_condition:
                    _bolt_runtime.commands.extend(_bolt_refs[0].commands)
                    if _bolt_var1:
                        continue
        break
_bolt_var3 = _bolt_helper_replace(_bolt_refs[1], commands=_bolt_helper_children(_bolt_var2))
---
output = _bolt_var3
---
_bolt_refs[0]
<class 'mecha.ast.AstRoot'>
  location: SourceLocation(pos=16, lineno=2, colno=5)
  end_location: SourceLocation(pos=25, lineno=2, colno=14)
  commands:
    <class 'mecha.ast.AstCommand'>
_bolt_refs[1]
<class 'mecha.ast.AstRoot'>
  location: SourceLocation(pos=0, lineno=1, colno=1)
  end_location: SourceLocation(pos=25, lineno=2, colno=14)
  commands:
    <class 'mecha.ast.AstCommand'>
