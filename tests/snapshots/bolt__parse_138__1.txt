_bolt_lineno = [1, 20, 24, 27], [1, 2, 4, 1]
_bolt_helper_loop = _bolt_runtime.helpers['loop']
_bolt_helper_branch = _bolt_runtime.helpers['branch']
_bolt_helper_operator_not = _bolt_runtime.helpers['operator_not']
_bolt_helper_children = _bolt_runtime.helpers['children']
_bolt_helper_replace = _bolt_runtime.helpers['replace']
_bolt_helper_exit_stack = _bolt_runtime.helpers['exit_stack']
with _bolt_runtime.scope() as _bolt_var3:
    while True:
        with _bolt_runtime.scope() as _bolt_condition_commands:
            _bolt_var0 = True
        with _bolt_helper_exit_stack() as _bolt_fused_with_statement0:
            (_bolt_loop_overridden, _bolt_var1) = _bolt_fused_with_statement0.enter_context(_bolt_helper_loop(_bolt_var0))
            _bolt_runtime.commands.extend(_bolt_condition_commands)
            if not _bolt_loop_overridden:
                _bolt_var0 = bool(_bolt_var0)
            _bolt_condition = _bolt_fused_with_statement0.enter_context(_bolt_helper_branch(_bolt_var0))
            if _bolt_condition:
                _bolt_var2 = 'hello'
                _bolt_var2_inverse = _bolt_helper_operator_not(_bolt_var2)
                with _bolt_helper_branch(_bolt_var2) as _bolt_condition:
                    if _bolt_condition:
                        pass
                with _bolt_helper_branch(_bolt_var2_inverse) as _bolt_condition:
                    if _bolt_condition:
                        break
                if _bolt_var1:
                    continue
        break
_bolt_var4 = _bolt_helper_replace(_bolt_refs[0], commands=_bolt_helper_children(_bolt_var3))
---
output = _bolt_var4
---
_bolt_refs[0]
<class 'mecha.ast.AstRoot'>
  location: SourceLocation(pos=0, lineno=1, colno=1)
  end_location: SourceLocation(pos=65, lineno=6, colno=1)
  commands:
    <class 'mecha.ast.AstCommand'>
